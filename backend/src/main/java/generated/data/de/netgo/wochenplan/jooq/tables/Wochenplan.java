/*
 * This file is generated by jOOQ.
 */
package de.netgo.wochenplan.jooq.tables;


import de.netgo.wochenplan.jooq.Keys;
import de.netgo.wochenplan.jooq.Public;
import de.netgo.wochenplan.jooq.tables.Aktivitaet.AktivitaetPath;
import de.netgo.wochenplan.jooq.tables.Benutzer.BenutzerPath;
import de.netgo.wochenplan.jooq.tables.records.WochenplanRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Wochenplan extends TableImpl<WochenplanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.wochenplan</code>
     */
    public static final Wochenplan WOCHENPLAN = new Wochenplan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WochenplanRecord> getRecordType() {
        return WochenplanRecord.class;
    }

    /**
     * The column <code>public.wochenplan.id</code>.
     */
    public final TableField<WochenplanRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.wochenplan.benutzer_id</code>.
     */
    public final TableField<WochenplanRecord, UUID> BENUTZER_ID = createField(DSL.name("benutzer_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.wochenplan.name</code>.
     */
    public final TableField<WochenplanRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "");

    private Wochenplan(Name alias, Table<WochenplanRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Wochenplan(Name alias, Table<WochenplanRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.wochenplan</code> table reference
     */
    public Wochenplan(String alias) {
        this(DSL.name(alias), WOCHENPLAN);
    }

    /**
     * Create an aliased <code>public.wochenplan</code> table reference
     */
    public Wochenplan(Name alias) {
        this(alias, WOCHENPLAN);
    }

    /**
     * Create a <code>public.wochenplan</code> table reference
     */
    public Wochenplan() {
        this(DSL.name("wochenplan"), null);
    }

    public <O extends Record> Wochenplan(Table<O> path, ForeignKey<O, WochenplanRecord> childPath, InverseForeignKey<O, WochenplanRecord> parentPath) {
        super(path, childPath, parentPath, WOCHENPLAN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WochenplanPath extends Wochenplan implements Path<WochenplanRecord> {
        public <O extends Record> WochenplanPath(Table<O> path, ForeignKey<O, WochenplanRecord> childPath, InverseForeignKey<O, WochenplanRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WochenplanPath(Name alias, Table<WochenplanRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WochenplanPath as(String alias) {
            return new WochenplanPath(DSL.name(alias), this);
        }

        @Override
        public WochenplanPath as(Name alias) {
            return new WochenplanPath(alias, this);
        }

        @Override
        public WochenplanPath as(Table<?> alias) {
            return new WochenplanPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<WochenplanRecord> getPrimaryKey() {
        return Keys.WOCHENPLAN_PKEY;
    }

    @Override
    public List<ForeignKey<WochenplanRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WOCHENPLAN__WOCHENPLAN_BENUTZER_ID_FKEY);
    }

    private transient BenutzerPath _benutzer;

    /**
     * Get the implicit join path to the <code>public.benutzer</code> table.
     */
    public BenutzerPath benutzer() {
        if (_benutzer == null)
            _benutzer = new BenutzerPath(this, Keys.WOCHENPLAN__WOCHENPLAN_BENUTZER_ID_FKEY, null);

        return _benutzer;
    }

    private transient AktivitaetPath _aktivitaet;

    /**
     * Get the implicit to-many join path to the <code>public.aktivitaet</code>
     * table
     */
    public AktivitaetPath aktivitaet() {
        if (_aktivitaet == null)
            _aktivitaet = new AktivitaetPath(this, null, Keys.AKTIVITAET__AKTIVITAET_WOCHENPLAN_ID_FKEY.getInverseKey());

        return _aktivitaet;
    }

    @Override
    public Wochenplan as(String alias) {
        return new Wochenplan(DSL.name(alias), this);
    }

    @Override
    public Wochenplan as(Name alias) {
        return new Wochenplan(alias, this);
    }

    @Override
    public Wochenplan as(Table<?> alias) {
        return new Wochenplan(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wochenplan rename(String name) {
        return new Wochenplan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wochenplan rename(Name name) {
        return new Wochenplan(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wochenplan rename(Table<?> name) {
        return new Wochenplan(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wochenplan where(Condition condition) {
        return new Wochenplan(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wochenplan where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wochenplan where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wochenplan where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wochenplan where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wochenplan where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wochenplan where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wochenplan where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wochenplan whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wochenplan whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
